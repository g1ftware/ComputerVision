
**Exercise 1. Face tracking example using KLT tracker**

Run the example as instructed below and answer the questions.

a) Run Exercise8.ipynb
b) Run Exercise8.ipynb with a different input by changing the input to obama.avi: frames=faceTracker('obama.avi')
c) What could be the main reasons why most of the features are not tracked very long in case b) above?

Lighting Changes: Variations in lighting or shadows across frames can cause the KLT tracker to lose some of the initially detected features, as these features may no longer match in subsequent frames.
Fast Movements: If the subject moves too quickly, the features might move out of the visible frame, making them difficult to track consistently.
Rotation and Deformation of the Face: As the face rotates or changes expressions, the features initially tracked may no longer match the altered face, causing the tracker to lose them.
d) How could one try to avoid the problem of gradually losing the features? Suggest one or more improvements.

Periodic Feature Re-detection: By periodically re-detecting and updating the features, the tracking system can maintain accuracy over time as new features are added.
Using Illumination-Invariant Features: Implementing algorithms like SIFT or SURF, which are more resistant to lighting changes, can enhance tracking stability.
Using a Pyramid Approach: The KLT tracker can be enhanced with a pyramid structure to track features at multiple scales, which can help maintain feature consistency even with minor movements.
Adjusting Frame Rate: Reducing the frame rate in cases of fast movement can help the tracker maintain feature positions better across frames. e) Voluntary task: Capture a video of your own face or of a picture of a face, and check that whether the tracking works for you. That is, replace the input video path in faceTrackingDemo.py with the path to your own video.


#Exercise 2. Kanade-Lucas-Tomasi (KLT) feature tracking (Pen & paper problem)

Read Sections 2.1 and 2.2 from the paper by Baker and Matthews. Show that the Equation (10) in the paper gives the same solution as the equations on slide 25 of Lecture 7, when the geometric warping W (between the current frame and the template window in the previous frame) is a translation.
